{% set _key = '%s-%.1f-prod'|format(project_name, odoo_version)|replace('.', '-') -%}
version: "2.4"

services:
  odoo:
    extends:
      file: common.yaml
      service: odoo
    restart: unless-stopped
    env_file:
      - .docker/odoo.env
      - .docker/db-access.env
    environment:
      DOODBA_ENVIRONMENT: "${DOODBA_ENVIRONMENT-prod}"
      INITIAL_LANG: "$INITIAL_LANG"
      {%- if smtp_relay_host %}
      SMTP_SERVER: smtplocal
      {%- endif %}
    depends_on:
      - db
      {%- if smtp_relay_host %}
      - smtp
      {%- endif %}
    networks:
      default:
    {%- if odoo_proxy == "traefik" %}
      inverseproxy_shared:
    labels:
      traefik.longpolling.frontend.rule: "Host:${DOMAIN_PROD};PathPrefix:/longpolling/"
      traefik.www.frontend.rule: "Host:${DOMAIN_PROD}"
      {%- if paths_without_crawlers %}
      traefik.forbid-crawlers.frontend.rule: "Host:${DOMAIN_PROD};PathPrefix:
        {%- for path in paths_without_crawlers -%}
        {{ path }},{{ path }}/{anything:.*}
        {%- if not loop.last %},{% endif %}
        {%- endfor %}"
      traefik.forbid-crawlers.frontend.headers.customResponseHeaders:
        "X-Robots-Tag:noindex, nofollow"
      {%- endif %}
      {%- if domain_prod_alternatives %}
      {%- for domain in domain_prod_alternatives %}
      traefik.alt-{{ loop.index0 }}.frontend.redirect.regex: "^(.*)://${DOMAIN_PROD_ALT_{{ loop.index0 }}}/(.*)$$"
      traefik.alt-{{ loop.index0 }}.frontend.redirect.replacement: "$$1://${DOMAIN_PROD}/$$2"
      traefik.alt-{{ loop.index0 }}.frontend.rule: "Host:${DOMAIN_PROD_ALT_{{ loop.index0 }}}"
      {%- endfor %}
      {%- endif %}
      # Main service
      traefik.http.middlewares.{{ _key }}-buffering.buffering.retryExpression:
        IsNetworkError() && Attempts() < 5
      traefik.http.middlewares.{{ _key }}-compress.compress: "true"
      {%- if cidr_whitelist %}
      ? traefik.http.middlewares.{{ _key }}-whitelist.IPWhiteList.sourceRange
      : {% for cidr in cidr_whitelist -%}
        {{ cidr }}{% if not loop.last %}, {% endif %}
        {%- endfor %}
      {%- endif %}
      traefik.http.routers.{{ _key }}-main.entrypoints: "web-main"
      traefik.http.routers.{{ _key }}-main.middlewares:
        {{ _key }}-buffering,
        {{ _key }}-compress
        {%- if cidr_whitelist %}, {{ _key }}-whitelist{% endif %}
      traefik.http.routers.{{ _key }}-main.rule: "host(`${DOMAIN_PROD}`)"
      traefik.http.routers.{{ _key }}-main.service: "{{ _key }}-main"
      traefik.http.routers.{{ _key }}-main.tls: "true"
      traefik.http.routers.{{ _key }}-main.tls.certresolver: "letsencrypt"
      traefik.http.services.{{ _key }}-main.loadbalancer.server.port: 8069
      {%- if domain_prod_alternatives %}
      # Redirect alternative domains to main domain
      traefik.http.middlewares.{{ _key }}-redirect2main.redirectregex.regex: "^https://([^/]+)/(.*)$$"
      traefik.http.middlewares.{{ _key }}-redirect2main.redirectregex.replacement: "https://${DOMAIN_PROD}/$${2}"
      traefik.http.routers.{{ _key }}-altdomains.entrypoints: "web-main"
      traefik.http.routers.{{ _key }}-altdomains.middlewares:
        {{ _key }}-compress,
        {{ _key }}-redirect2main
        {%- if cidr_whitelist %}, {{ _key }}-whitelist{% endif %}
      traefik.http.routers.{{ _key }}-altdomains.rule:
        Host(
          {%- for domain in domain_prod_alternatives -%}
          `${DOMAIN_PROD_ALT_{{ loop.index0 }}}`
          {%- if not loop.last %}, {% endif %}
          {%- endfor -%}
        )
      traefik.http.routers.{{ _key }}-altdomains.service: "{{ _key }}-main"
      traefik.http.routers.{{ _key }}-altdomains.tls: "true"
      traefik.http.routers.{{ _key }}-altdomains.tls.certresolver: "letsencrypt"
      {%- endif %}
      # Longpolling service
      traefik.http.routers.{{ _key }}-longpolling.entrypoints: "web-main"
      {%- if cidr_whitelist %}
      traefik.http.routers.{{ _key }}-longpolling.middlewares: {{ _key }}-whitelist
      {%- endif %}
      traefik.http.routers.{{ _key }}-longpolling.rule:
        "host(`${DOMAIN_PROD}`) && pathprefix(`/longpolling/`)"
      traefik.http.routers.{{ _key }}-longpolling.service: "{{ _key }}-longpolling"
      traefik.http.services.{{ _key }}-longpolling.loadbalancer.server.port: 8072
      traefik.http.routers.{{ _key }}-longpolling.tls: "true"
      traefik.http.routers.{{ _key }}-longpolling.tls.certresolver: "letsencrypt"
      {%- if paths_without_crawlers %}
      # Forbid crawlers
      ? traefik.http.middlewares.{{ _key }}-forbid-crawlers.headers.customResponseHeaders.X-Robots-Tag
      : "noindex, nofollow"
      traefik.http.routers.{{ _key }}-forbidden-crawlers.entrypoints: "web-main"
      traefik.http.routers.{{ _key }}-forbidden-crawlers.middlewares:
        {{ _key }}-buffering,
        {{ _key }}-compress,
        {{ _key }}-forbid-crawlers
        {%- if cidr_whitelist %}, {{ _key }}-whitelist{% endif %}
      traefik.http.routers.{{ _key }}-forbidden-crawlers.rule:
        Host(`${DOMAIN_PROD}`) && Path(
          {%- for path in paths_without_crawlers -%}
          `{{ path }}`, `{{ path }}/{anything:.*}`
          {%- if not loop.last %}, {% endif %}
          {%- endfor -%}
        )
      traefik.http.routers.{{ _key }}-forbidden-crawlers.service: "{{ _key }}-main"
      traefik.http.routers.{{ _key }}-forbidden-crawlers.tls: "true"
      traefik.http.routers.{{ _key }}-forbidden-crawlers.tls.certresolver: "letsencrypt"
      {%- endif %}
    {%- endif %}

  db:
    extends:
      file: common.yaml
      service: db
    env_file:
      - .docker/db-creation.env
    restart: unless-stopped
  {%- if smtp_relay_host %}

  smtp:
    extends:
      file: common.yaml
      service: smtpreal
    env_file:
      - .docker/smtp.env
    networks:
      default:
        aliases:
          - smtplocal
    restart: unless-stopped
  {%- endif %}
  {%- if backup_dst %}

  backup:
    extends:
      file: common.yaml
      service: backup
    env_file:
      - .docker/backup.env
      - .docker/db-access.env
    restart: unless-stopped
    depends_on:
      - db
      {%- if smtp_relay_host %}
      - smtp
      {%- endif %}
  {%- endif %}

networks:
  default:
    driver_opts:
      encrypted: 1
  {%- if odoo_proxy == "traefik" %}

  inverseproxy_shared:
    external: true
  {%- endif %}

volumes:
  {%- if backup_dst %}
  backup_cache:
  {%- endif %}
  filestore:
  db:
  {%- if smtp_relay_host %}
  mailconfig:
  maildata:
  maillogs:
  maillogssupervisord:
  mailstate:
  {%- endif %}
